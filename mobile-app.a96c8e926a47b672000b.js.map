{"version":3,"sources":["webpack:///./src/mobile/app.tsx","webpack:///./src/mobile/views/Home.tsx","webpack:///./src/shared/GatewayClient.ts","webpack:///./src/shared/RTCClient.ts","webpack:///./src/shared/components/SessionDisplay.tsx","webpack:///./src/shared/components/SessionScanner.tsx"],"names":["React","__webpack_require__","ReactDOM","Home_1","localStorage","setItem","render","createElement","default","document","getElementById","SessionDisplay_1","SessionScanner_1","RTCClient_1","exports","PureComponent","[object Object]","props","context","super","this","onSessionScanned","sessionId","client","connectTo","className","debug","events_1","SocketIO","log","EventEmitter","socket","transports","autoConnect","on","fromId","data","emit","error","localId","connected","Promise","resolve","reject","connect","once","removeListener","isConnected","id","disconnect","remoteId","GatewayClient_1","sessionCreating","sessionCreated","onGatewayMessage","msg","__awaiter","type","pc","setRemoteDescription","RTCSessionDescription","sessionDescription","createAnswer","setLocalDescription","gatewayClient","send","candidate","RTCIceCandidate","sdpMLineIndex","addIceCandidate","onSendChannelOpen","e","setupDataChannel","onSendChannelClose","onDataChannel","sendChannel","channel","onLocalIceCandidate","sdpMid","RTCPeerConnection","iceServers","urls","onicecandidate","ondatachannel","createDataChannel","onopen","onclose","createOffer","window","sendMessage","JSON","stringify","onmessage","event","console","parse","QRCode","onSessionStarted","setState","onSessionStopped","undefined","state","startSession","value","size","Instascan","scan","isScanning","Camera","getCameras","then","cameras","length","scanner","start","catch","stopScanning","stop","Scanner","video","videoElt","mirror","addListener","content","onClick","ref"],"mappings":"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","file":"mobile-app.a96c8e926a47b672000b.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Home from './views/Home';\n\nlocalStorage.setItem('debug', 'swift*');\n\nReactDOM.render(<Home />, document.getElementById('swift'));\n\n\n\n// WEBPACK FOOTER //\n// ./src/mobile/app.tsx","import * as React from 'react';\nimport SessionDisplay from 'shared/components/SessionDisplay';\nimport SessionScanner from 'shared/components/SessionScanner';\nimport RTCClient from 'shared/RTCClient';\n\nexport type Props = {};\n\ntype State = {};\n\nclass Home extends React.PureComponent<Props, State> {\n\tprivate client: RTCClient;\n\n\tconstructor(props: Props, context: any) {\n\t\tsuper(props, context);\n\n\t\tthis.client = new RTCClient();\n\t}\n\n\tprivate onSessionScanned = (sessionId: string) => {\n\t\tthis.client.connectTo(sessionId);\n\t}\n\n\tpublic render() {\n\t\treturn (\n\t\t\t<div className='home'>\n\t\t\t\t<SessionDisplay client={ this.client } />\n\t\t\t\t<SessionScanner onSessionScanned={ this.onSessionScanned } />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Home;\n\n\n\n// WEBPACK FOOTER //\n// ./src/mobile/views/Home.tsx","import * as debug from 'debug-logger';\nimport { EventEmitter } from 'events';\nimport * as SocketIO from 'socket.io-client';\nconst log = debug('swift:GatewayClient');\n\nclass GatewayClient<T> extends EventEmitter {\n\tprivate socket: SocketIOClient.Socket;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.socket = SocketIO(__SOCKET_END_POINT__, { transports: ['websocket'], autoConnect: false });\n\n\t\tthis.socket.on('data', ({ fromId, data }: { data: T, fromId: string }) => {\n\t\t\tlog('received data', data);\n\t\t\tthis.emit('message', fromId, data);\n\t\t});\n\t\tthis.socket.on('error', (error: any) => log(error));\n\t\tthis.socket.on('disconnect', () => {\n\t\t\tlog(`${this.localId}: Disconnected from the gateway`);\n\t\t\tthis.emit('disconnected');\n\t\t});\n\t}\n\n\tpublic connect(): Promise<void> {\n\t\tif (this.socket.connected) { return Promise.resolve(); }\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.socket.connect();\n\n\t\t\tthis.socket.once('connect', () => {\n\t\t\t\tlog(`${this.localId}: Connected to the gateway`);\n\t\t\t\tthis.socket.removeListener('connect_error');\n\t\t\t\tthis.socket.removeListener('connect_timeout');\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\tthis.socket.once('connect_error', reject);\n\t\t\tthis.socket.once('connect_timeout', reject);\n\t\t});\n\t}\n\n\tget isConnected(): boolean { return this.socket.connected; }\n\n\tget localId(): string { return this.socket.id; }\n\n\tpublic disconnect() {\n\t\tif (!this.socket.connected) { return; }\n\t\tthis.socket.disconnect();\n\t\tthis.socket.removeListener('connect_error');\n\t\tthis.socket.removeListener('connect_timeout');\n\t}\n\n\tpublic send(remoteId: string, data: T) {\n\t\tlog('sending to', data, 'to', remoteId);\n\t\tthis.socket.emit('data', {\n\t\t\tremoteId,\n\t\t\tdata\n\t\t});\n\t}\n}\n\nexport default GatewayClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/GatewayClient.ts","import * as debug from 'debug-logger';\nimport { EventEmitter } from 'events';\nimport GatewayClient from 'shared/GatewayClient';\nconst log = debug('swift:RTCClient');\n\ntype Message =\n\t{ type: 'offer', sessionDescription: RTCSessionDescriptionInit } |\n\t{ type: 'answer', sessionDescription: RTCSessionDescriptionInit } |\n\t{ type: 'candidate', candidate: RTCIceCandidateInit };\n\nclass RTCClient extends EventEmitter {\n\tprivate pc: RTCPeerConnection;\n\t// private remoteConnection: RTCPeerConnection;\n\tprivate sendChannel: RTCDataChannel;\n\tprivate gatewayClient: GatewayClient<Message>;\n\tprivate remoteId: string;\n\tpublic sessionCreating = false;\n\tpublic sessionCreated = false;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.gatewayClient = new GatewayClient();\n\t\tthis.gatewayClient.on('message', this.onGatewayMessage);\n\t\tthis.gatewayClient.on('disconnected', () => {\n\t\t\tthis.sessionCreating = false;\n\t\t\tif (this.sessionCreated) {\n\t\t\t\tthis.sessionCreated = false;\n\t\t\t\tthis.emit('sessionStopped');\n\t\t\t}\n\t\t});\n\n\t\ttry {\n\t\t\tthis.pc = new RTCPeerConnection({\n\t\t\t\ticeServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n\t\t\t});\n\t\t\tthis.pc.onicecandidate = this.onLocalIceCandidate;\n\t\t\tthis.pc.ondatachannel = this.onDataChannel;\n\n\t\t\tthis.sendChannel = this.pc.createDataChannel('Swift Data Channel');\n\t\t\tthis.sendChannel.onopen = this.onSendChannelOpen;\n\t\t\tthis.sendChannel.onclose = this.onSendChannelClose;\n\t\t} catch (error) {\n\t\t\tlog(error);\n\t\t}\n\t}\n\n\tget localId(): string { return this.gatewayClient.localId; }\n\n\tpublic async startSession() {\n\t\tif (this.sessionCreating) { return; }\n\t\tthis.sessionCreating = true;\n\t\tawait this.gatewayClient.connect();\n\t\tthis.sessionCreating = false;\n\t\tthis.sessionCreated = true;\n\t\tthis.emit('sessionStarted', this.gatewayClient.localId);\n\t}\n\n\tpublic async connectTo(remoteId: string) {\n\t\tlog('connectTo', remoteId);\n\t\tif (this.gatewayClient.isConnected) {\n\t\t\tawait this.gatewayClient.connect();\n\t\t}\n\t\tthis.remoteId = remoteId;\n\t\tlog('create offer');\n\t\tconst sessionDescription = await this.pc.createOffer() as any;\n\t\tlog('offer created');\n\t\tawait this.pc.setLocalDescription(sessionDescription);\n\t\tlog('sending session desciption', sessionDescription);\n\t\tthis.gatewayClient.send(remoteId, { type: 'offer', sessionDescription });\n\t}\n\n\tprivate onGatewayMessage = async (fromId: string, msg: Message) => {\n\t\tthis.remoteId = fromId;\n\t\tlog('received message', msg);\n\t\tif (msg.type === 'offer') {\n\t\t\tthis.pc.setRemoteDescription(new RTCSessionDescription(msg.sessionDescription));\n\t\t\tconst sessionDescription = await this.pc.createAnswer() as any;\n\t\t\tthis.pc.setLocalDescription(sessionDescription);\n\t\t\tthis.gatewayClient.send(fromId, { type: 'answer', sessionDescription });\n\t\t} else if (msg.type === 'answer') {\n\t\t\tthis.pc.setRemoteDescription(msg.sessionDescription);\n\t\t} else if (msg.type === 'candidate') {\n\t\t\tconst candidate = new RTCIceCandidate({\n\t\t\t\tsdpMLineIndex: msg.candidate.sdpMLineIndex,\n\t\t\t\tcandidate: msg.candidate.candidate\n\t\t\t});\n\t\t\tthis.pc.addIceCandidate(candidate);\n\t\t}\n\t}\n\n\tprivate onSendChannelOpen = (e: Event) => {\n\t\tlog('data channel opened');\n\t\tthis.setupDataChannel();\n\t}\n\n\tprivate onSendChannelClose = (e: Event) => {\n\t\tlog('onSendChannelClose', e);\n\t}\n\n\tprivate onDataChannel = (e: RTCDataChannelEvent) => {\n\t\tlog('data channel opened');\n\t\tthis.sendChannel = e.channel;\n\t\tthis.setupDataChannel();\n\t}\n\n\tprivate setupDataChannel() {\n\t\t(window as any).sendMessage = (data: any) => {\n\t\t\tthis.sendChannel.send(JSON.stringify(data));\n\t\t};\n\n\t\tthis.sendChannel.onmessage = (event) => {\n\t\t\tconsole.log(JSON.parse(event.data)); // tslint:disable-line\n\t\t};\n\t}\n\n\tprivate onLocalIceCandidate = (e: RTCPeerConnectionIceEvent) => {\n\t\tif (!e.candidate) { return; }\n\n\t\tthis.gatewayClient.send(this.remoteId, {\n\t\t\ttype: 'candidate',\n\t\t\tcandidate: {\n\t\t\t\tsdpMLineIndex: e.candidate.sdpMLineIndex,\n\t\t\t\tsdpMid: e.candidate.sdpMid,\n\t\t\t\tcandidate: e.candidate.candidate\n\t\t\t} as RTCIceCandidateInit\n\t\t});\n\t}\n}\n\nexport default RTCClient;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/RTCClient.ts","import * as QRCode from 'qrcode.react';\nimport * as React from 'react';\nimport RTCClient from 'shared/RTCClient';\n\nexport type Props = {\n\tclient: RTCClient\n};\n\ntype State = {\n\tsessionCreating: boolean,\n\tsessionId?: string\n};\n\nclass SessionDisplay extends React.PureComponent<Props, State> {\n\tconstructor(props: Props, context: any) {\n\t\tsuper(props, context);\n\n\t\tthis.state = {\n\t\t\tsessionCreating: true\n\t\t};\n\n\t\tprops.client.startSession();\n\t}\n\n\tpublic componentWillMount() {\n\t\tthis.props.client.on('sessionStarted', this.onSessionStarted);\n\t\tthis.props.client.on('sessionEnd', this.onSessionStopped);\n\t}\n\n\tpublic componentWillUnmount() {\n\t\tthis.props.client.removeListener('sessionStarted', this.onSessionStarted);\n\t\tthis.props.client.removeListener('onSessionStopped', this.onSessionStarted);\n\t}\n\n\tprivate onSessionStarted = (sessionId: string) => {\n\t\tthis.setState({ sessionId, sessionCreating: false });\n\t}\n\n\tprivate onSessionStopped = () => {\n\t\tthis.setState({ sessionId: undefined, sessionCreating: false });\n\t}\n\n\tpublic render() {\n\t\tconst { sessionId, sessionCreating } = this.state;\n\n\t\treturn (\n\t\t\t<div className='session-display'>\n\t\t\t\t{ sessionCreating && 'Creating a session...' }\n\t\t\t\t{ sessionId ?\n\t\t\t\t\t<div className='session-display__qr-area'>\n\t\t\t\t\t\t<QRCode value={ sessionId } size={ 256 } />\n\t\t\t\t\t\t<div className='session-display__id'>{ 'id: ' + sessionId }</div>\n\t\t\t\t\t</div>\n\t\t\t\t: null }\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SessionDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/components/SessionDisplay.tsx","import * as debug from 'debug-logger';\nimport * as Instascan from 'instascan';\nimport * as React from 'react';\nconst log = debug('swift:SessionScanner');\n\nexport type Props = {\n\tonSessionScanned: (sessionId: string) => void\n};\n\ntype State = {\n\tisScanning: boolean\n};\n\nclass SessionDisplay extends React.PureComponent<Props, State> {\n\tprivate videoElt: HTMLVideoElement | null;\n\tprivate scanner: any;\n\n\tconstructor (props: Props, context: any) {\n\t\tsuper(props, context);\n\n\t\tthis.state = { isScanning: false };\n\t}\n\n\tpublic componentDidMount () {\n\t\tthis.scanner = new Instascan.Scanner({ video: this.videoElt, mirror: false });\n\t\tthis.scanner.addListener('scan', (content: string) => {\n\t\t\tthis.scanner.stop();\n\t\t\tthis.setState({ isScanning: false }, () => this.props.onSessionScanned(content));\n\t\t});\n\t}\n\n\tprivate scan = () => {\n\t\tthis.setState({ isScanning: true }, () => {\n\n\t\t\tInstascan.Camera.getCameras().then((cameras: any[]) => {\n\t\t\t\tif (cameras.length > 0) {\n\t\t\t\t\tthis.scanner.start(cameras[1] || cameras[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({ isScanning: false });\n\t\t\t\t\tlog('No cameras found.');\n\t\t\t\t}\n\t\t\t}).catch((e: any) => {\n\t\t\t\tthis.setState({ isScanning: false });\n\t\t\t\tlog(e);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate stopScanning = () => {\n\t\tthis.scanner.stop();\n\t}\n\n\tpublic render () {\n\t\tconst { isScanning } = this.state;\n\n\t\treturn (\n\t\t\t<div className='session-scanner'>\n\t\t\t\t{ isScanning\n\t\t\t\t\t? <button onClick={ this.stopScanning }>Stop scanning</button>\n\t\t\t\t\t: <button onClick={ this.scan }>scan QR code</button>\n\t\t\t\t}\n\t\t\t\t<video ref={ ref => this.videoElt = ref } />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SessionDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/components/SessionScanner.tsx"],"sourceRoot":""}